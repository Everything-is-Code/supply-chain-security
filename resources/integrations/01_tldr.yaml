apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  labels:
    app.kubernetes.io: integrations-acs
  name: integrations-acs
  namespace: demo-secure-images
spec:
  template:
    spec:
      containers:
        - image: registry.redhat.io/web-terminal/web-terminal-tooling-rhel8@sha256:b8ac3a7fcadce1be6ac091047132d51662643898b7d606bedac2cf5224a148fb
          command:
            - /bin/bash
            - -c
            - |
              export CENTRAL_URL=$(oc get route central -n stackrox --template='{{.spec.host}}')
              export acs_password=$(oc get secret acs-password -n stackrox -o jsonpath='{.data.password}' | base64 --decode)
              export state=$(curl -s https://$CENTRAL_URL/v1/login/authproviders --insecure | jq -r .authProviders[0].id)
              export token=$(curl -s https://$CENTRAL_URL/v1/authProviders/exchangeToken    -H 'content-type: application/json'   --data-raw "{\"external_token\":\"username=admin&password=$acs_password\",\"type\":\"basic\",\"state\":\"$state\"}"   -k | jq -r .token)
              export ROX_API_TOKEN=$(curl -s https://$CENTRAL_URL/v1/apitokens/generate   -H "authorization: Bearer $token"   -H "content-type: application/json"   --data-raw '{"name":"token1","roles":["Admin"]}' --insecure | jq -r  .token)

              ## Creating ROX secret
              cat <<EOF > roxsecret.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: roxsecrets
                namespace: $NAMESPACE
              type: Opaque
              stringData:
                rox_api_token: "$ROX_API_TOKEN"
                rox_central_endpoint: "$CENTRAL_URL:443"
              EOF

              oc apply -f ./roxsecret.yaml

              ## Creating Cosign Signature

              ### Downloading cosig cli
              curl -L -o cosign -k -s https://github.com/sigstore/cosign/releases/download/v1.13.2/cosign-linux-amd64
              chmod +x ./cosign

              ### Generating key pair secret
              export COSIGN_PASSWORD=redhat01
              ./cosign generate-key-pair k8s://$NAMESPACE/cosign 
              ### Generating integration with ACS
              export cosign_pub=$(oc get secret cosign -n demo-secure-images -o jsonpath='{.data.cosign\.pub}' | base64 --decode)
              #### fix for send json with ub key
              clean_cosign_pub="${cosign_pub//$'\n'/\\n}"
              policy_id=$(curl -s https://$CENTRAL_URL/v1/signatureintegrations -H "authorization: Bearer $token"   -H 'content-type: application/json'   --data-raw "{\"id\":\"\",\"name\":\"$COSIGN_NAME\",\"cosign\":{\"publicKeys\":[{\"name\":\"cosign-pub\",\"publicKeyPemEnc\":\"$clean_cosign_pub\"}]}}"   --insecure | jq -r .id )
              ### Generating ACS Policy
              curl -k -s https://$CENTRAL_URL/v1/policies/import \
              -H "authorization: Bearer $token" \
              -H 'accept-language: es-419,es;q=0.9,en;q=0.8' \
              -H 'content-type: application/json' \
              --data-raw "{\"policies\":[{\"id\":\"c8fde2c3-980c-40e3-bc9d-6245b13ab81e\",\"name\":\"Trusted_Signature_Image_Policy\",\"description\":\"Alert on Images that have not been signed\",\"rationale\":\"rationale\",\"remediation\":\"All images should be signed by our cosign-demo signature\",\"disabled\":false,\"categories\":[\"Security Best Practices\"],\"lifecycleStages\":[\"BUILD\",\"DEPLOY\"],\"severity\":\"HIGH_SEVERITY\",\"enforcementActions\":[],\"notifiers\":[],\"SORTName\":\"\",\"SORTLifecycleStage\":\"\",\"SORTEnforcement\":true,\"policyVersion\":\"1.1\",\"policySections\":[{\"sectionName\":\"Policy Section 1\",\"policyGroups\":[{\"fieldName\":\"Image Signature Verified By\",\"booleanOperator\":\"OR\",\"negate\":false,\"values\":[{\"value\":\"$policy_id\"}]}]}],\"mitreAttackVectors\":[],\"criteriaLocked\":false,\"mitreVectorsLocked\":false,\"isDefault\":false}],\"metadata\":{\"overwrite\":false}}" \
              --insecure
          imagePullPolicy: Always
          name: integrations-acs
          env:
          - name: RAW_POLICY_GIT
            value: "git_url"
          - name: COSIGN_NAME
            value: "cosign"
          - name: NAMESPACE
            value: demo-secure-images
      restartPolicy: OnFailure
      serviceAccount: acs-gitops
      serviceAccountName: acs-gitops
      terminationGracePeriodSeconds: 30
